plugins {
	id 'java'
	id 'org.jetbrains.kotlin.jvm'
	id 'org.jetbrains.kotlin.plugin.serialization'

	id 'distribution'
	id 'application'

	id 'com.diffplug.spotless'
	id 'de.undercouch.download'
	// id 'net.kyori.blossom'

	id "com.github.johnrengelman.shadow" version "7.1.2"
	id 'edu.sc.seis.launch4j' version '2.5.4'
	id "nebula.ospackage" version "9.1.1"
}

apply plugin: 'nebula.deb'
apply plugin: 'nebula.rpm'

group "$group"
archivesBaseName = "$name"
version "$version"
sourceCompatibility = targetCompatibility = "$jvmTarget"

project.ext {
	ver = project.properties["pre"] ?: version
	vendor = System.getProperty("java.vendor").replace(" ", "").replace(".", "").toLowerCase()

	if (vendor == "internationalbusinessmachinescorporation") {
		vendor = "ibm"
	}

	jv = JavaVersion.current()

	if (jv == JavaVersion.VERSION_1_8) {
		jv = "8"
	}

	mostlyName = "$name-$ver-${System.getProperty("os.name").toLowerCase()}-${System.getProperty("os.arch")}-java${jv}-${vendor}"

	licenseDir = new File(buildDir, 'licenses')
	toolDir = new File(buildDir, 'tools')
}

allprojects { p ->
	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'distribution'

	apply plugin: 'org.jetbrains.kotlin.jvm'
	apply plugin: 'org.jetbrains.kotlin.plugin.serialization'

	apply plugin: 'com.diffplug.spotless'
	// apply plugin: 'net.kyori.blossom'

	repositories {
		mavenCentral()

		maven { url 'https://jitpack.io' }
		maven { url 'https://github.com/eugener/oxbow/raw/master/maven/repository' }
		maven { url 'https://clojars.org/repo/' }
		maven { url 'https://raw.github.com/kristian/better-glass-pane/mvn-repo/' }
	}

	dependencies {
		api "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
		api "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
		api "org.jetbrains.kotlinx:kotlinx-serialization-json:${kotlinSerialization}"
		api "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
		api 'org.jetbrains.kotlinx:kotlinx-coroutines-swing:1.6.4'
		api 'org.jetbrains.kotlinx:kotlinx-datetime:0.4.0'
	}

	spotless {
		// ratchetFrom 'origin/rewrite'

		java {
			importOrder()
			removeUnusedImports()
			googleJavaFormat()

			licenseHeader "$licenseHeader\n\n"
		}

		groovyGradle {
			target '*.gradle'
			greclipse()
		}

		kotlin {
			ktlint("$ktlintVersion")

			licenseHeader "$licenseHeader\n\n"
		}

		format 'misc', {
			target '*.md', '.gitignore'

			trimTrailingWhitespace()
			indentWithTabs()
			endWithNewline()
		}
	}

	compileKotlin {
		kotlinOptions.jvmTarget = sourceCompatibility

		kotlinOptions {
			freeCompilerArgs = [
				"-Xinline-classes",
				"-opt-in=kotlin.RequiresOptIn",
			]
		}
	}

	/*blossom {
	 replaceToken('$[name]', p.property('id'))
	 replaceToken('$[author]', p.property('author'))
	 replaceToken('$[version]', p.version)
	 }*/
}

startScripts {
	executableDir = ""

	doLast {
		windowsScript.text = windowsScript.text.replaceAll('set CLASSPATH=.*', 'set CLASSPATH=.;%APP_HOME%/lib/*')
	}
}

distributions {
	//noinspection GroovyAssignabilityCheck
	main {
		contents {
			from files('README.MD', 'LICENSE')
			from startScripts

			into('data') {
				from files('data')
			}

			into('licenses') {
				from files("$buildDir/licenses")
			}
			into('tools') {
				from files("$buildDir/tools")
			}

			subprojects.each { p ->
				into('plugins') {
					from p.getTasksByName("jar", true)
				}
			}
		}
	}
}

distZip {
	archiveName "$mostlyName-distZip.zip"

	def list = []

	// Collect a list of all the JARs produced by submodules
	subprojects.each { p ->
		def jar = p.getTasksByName("jar", true).archiveFile

		// We have to leave these out though
		if (
		!(p.name in ["master", "core", "launcher"]) &&
		jar.size > 0
		) {
			list.add(jar.first().getAsFile().get())
		}
	}

	eachFile { file ->
		// Files in /bin are copied to the main directory
		// so we can exclude them
		if (file.path.contains('bin')) {
			file.exclude()
		} else if (file.path.contains('lib') &&
		// Check if the current file is a submodule
		file.getFile() in list
		|| file.name =~ /Rawky-\d\.\d\.\d\.jar/) {
			file.exclude()
		}
	}
}

distTar {
	archiveName "$mostlyName-distTar.tar"
}

launch4j {
	headerType = "gui"
	outfile = "${mostlyName}.exe"
	mainClassName = project.mainClassName
	jarTask = project.tasks.shadowJar
	bundledJrePath = "~/.jdks/jbr-11.0.14.1"
}

task deb(type: Deb) {
	packageName = 'rawky'
	version = project.properties["pre"] ?: version
	release = 1
	os LINUX

	from(jar.outputs.files) {
		into 'lib'
	}
	from('lib') {
		into 'lib'
	}
	from('home') {
		createDirectoryEntry = true
		fileMode 0500
		into 'home'
	}
}

task rpm(type: Rpm) {
	packageName = 'rawky'
	version = project.properties["pre"] ?: version
	release = 1
	os LINUX

	from(jar.outputs.files) {
		into 'lib'
	}
	from('lib') {
		into 'lib'
	}
	from('home') {
		createDirectoryEntry = true
		fileMode 0500
		into 'home'
	}
}

run {
	args = ['indev']

	doFirst {
		file('run').mkdirs()

		copy {
			from 'data'
			into 'run/data'
		}
	}

	workingDir 'run'

	dependencies {
		implementation project(':launcher')
		implementation project(":pixelgrid")

		// Pixel Grid -> Mode
		implementation project(":pixelgrid.mode.mouse")
		implementation project(":pixelgrid.mode.keyboard")

		// Pixel Grid -> Impex
		implementation project(":pixelgrid.impex.imageio")
		implementation project(":pixelgrid.impex.ascii")
		implementation project(":pixelgrid.impex.rawr")

		// Export -> Text -> Ascii
		implementation project(":pixelgrid.impex.ascii.block")

		// Pixel Grid -> Grid
		implementation project(":pixelgrid.grid.pixel")
		implementation project(":pixelgrid.grid.tile")

		// Widgets
		runtimeOnly project(":colourwheel")
		runtimeOnly project(":colourpalette")
		runtimeOnly project(":colourhistory")

		// Colour Palette -> Parser
		runtimeOnly project(":colourpalette.parser.json")
		runtimeOnly project(":colourpalette.parser.png")
		runtimeOnly project(":colourpalette.parser.gpl")
		runtimeOnly project(":colourpalette.parser.hex")
		runtimeOnly project(":colourpalette.parser.pal")
		runtimeOnly project(":colourpalette.parser.txt")

		runtimeOnly project(":tilepalette")
		runtimeOnly project(":tilepalette.parser.png")
		// runtimeOnly project(":tilepalette.parser.tmx")
		// runtimeOnly project(":tilepalette.parser.ogmo")
		// runtimeOnly project(":tilepalette.parser.ldtk")

		runtimeOnly project(":autosave")
		runtimeOnly project(":autoload")

		runtimeOnly project(":timeline")
		runtimeOnly project(":layerlist")

		runtimeOnly project(":server")
		runtimeOnly project(":server.userlist")
		runtimeOnly project(":server.chat")
		runtimeOnly project(":server.leaderboard")

		// Encodings
		runtimeOnly project(":server.encoding.ascii85")
		runtimeOnly project(":server.encoding.base58")
		runtimeOnly project(":server.encoding.base62")
		runtimeOnly project(":server.encoding.base64")
		runtimeOnly project(":server.encoding.base91")

		runtimeOnly project(":toolbox")

		// Tools
		runtimeOnly project(":toolbox.pencil")
		runtimeOnly project(":toolbox.eraser")
		runtimeOnly project(":toolbox.dropper")
		runtimeOnly project(":toolbox.line")
		runtimeOnly project(":toolbox.bucket")
		runtimeOnly project(":toolbox.shape")

		runtimeOnly project(":toolbox.shape.rectangle")
		runtimeOnly project(":toolbox.shape.circle")

		// Bucket Fills
		runtimeOnly project(":toolbox.bucket.fill.solid")
		runtimeOnly project(":toolbox.bucket.fill.stipple")

		// Sniffle
		// runtimeOnly project(':discordrpc')
		runtimeOnly project(':sniffle.pluginmanager')
		runtimeOnly project(':sniffle.settingsgui')
		runtimeOnly project(':sniffle.tipoftheday')
		runtimeOnly project(':sniffle.swingsettings')
	}

	application {
		mainClassName = 'com.deflatedpickle.rawky.launcher.MainKt'
	}
}