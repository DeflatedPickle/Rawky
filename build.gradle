//file:noinspection GroovyAccessibility
import io.github.fvarrui.javapackager.gradle.PackageTask

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'io.github.fvarrui:javapackager:1.7.2'
	}
}

plugins {
	id 'java'
	id 'org.jetbrains.kotlin.jvm'
	id 'org.jetbrains.kotlin.plugin.serialization'

	id 'distribution'
	id 'application'

	id 'com.diffplug.spotless'
	id 'de.undercouch.download'
	id 'net.kyori.blossom'
}

apply plugin: 'io.github.fvarrui.javapackager.plugin'

group "$group"
archivesBaseName = "$name"
version "$version"

project.ext {
	ver = project.properties["pre"] ?: version
	vendor = System.getProperty("java.vendor").replace(" ", "").replace(".", "").toLowerCase()

	if (vendor == "internationalbusinessmachinescorporation") {
		vendor = "ibm"
	}

	jv = JavaVersion.current()

	if (jv == JavaVersion.VERSION_1_8) {
		jv = "8"
	}

	mostlyName = "$name-$ver-${System.getProperty("os.name").toLowerCase()}-${System.getProperty("os.arch")}-java${jv}-${vendor}"

	licenseDir = new File(buildDir, 'licenses')
	toolDir = new File(buildDir, 'tools')
}

spotless {
	ratchetFrom 'origin/rewrite'
}

allprojects { p ->
	apply plugin: 'java-library'
	apply plugin: 'distribution'

	apply plugin: 'org.jetbrains.kotlin.jvm'
	apply plugin: 'org.jetbrains.kotlin.plugin.serialization'

	apply plugin: 'com.diffplug.spotless'
	apply plugin: 'net.kyori.blossom'

	repositories {
		mavenCentral()

		maven { url 'https://jitpack.io' }
		maven { url 'https://github.com/eugener/oxbow/raw/master/maven/repository' }
		maven { url 'https://clojars.org/repo/' }
		maven { url 'https://raw.github.com/kristian/better-glass-pane/mvn-repo/' }
	}

	dependencies {
		api "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
		api "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
		api "org.jetbrains.kotlinx:kotlinx-serialization-json:${kotlinSerialization}"
		api "org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinCoroutines}"
		api "org.jetbrains.kotlinx:kotlinx-coroutines-swing:${kotlinCoroutines}"
		api "org.jetbrains.kotlinx:kotlinx-datetime:${kotlinDateTime}"
	}

	spotless {
		java {
			importOrder()
			removeUnusedImports()
			googleJavaFormat()

			licenseHeader "$licenseHeader\n\n"
		}

		groovyGradle {
			target '*.gradle'
			// greclipse()
		}

		kotlin {
			ktlint()

			licenseHeader "$licenseHeader\n\n"
		}

		freshmark {
			target 'README.md'
		}

		json {
			target 'src/**/*.json'
			jackson()
		}
	}

	kotlin {
		jvmToolchain(11)
	}
	// compileKotlin.dependsOn spotlessApply

	blossom {
		replaceToken('$[name]', p.property('id'))
		replaceToken('$[author]', p.property('author'))
		replaceToken('$[version]', p.version)
	}
}

startScripts {
	executableDir = ""

	doLast {
		windowsScript.text = windowsScript.text.replaceAll('set CLASSPATH=.*', 'set CLASSPATH=.;%APP_HOME%/lib/*')
	}
}

distributions {
	//noinspection GroovyAssignabilityCheck
	main {
		contents {
			from files('README.md', 'LICENSE')
			from startScripts

			into('data') {
				from files('data')
			}

			into('licenses') {
				from files("$buildDir/licenses")
			}
			into('tools') {
				from files("$buildDir/tools")
			}

			subprojects.each { p ->
				into('plugins') {
					from p.getTasksByName("jar", true)
				}
			}
		}
	}
}

distZip {
	archiveName "$mostlyName-distZip.zip"

	def list = []

	// Collect a list of all the JARs produced by submodules
	subprojects.each { p ->
		def jar = p.getTasksByName("jar", true).archiveFile

		// We have to leave these out though
		if (
		!(p.name in ["master", "core", "launcher"]) &&
				jar.size > 0
				) {
			list.add(jar.first().getAsFile().get())
		}
	}

	eachFile { file ->
		// Files in /bin are copied to the main directory
		// so we can exclude them
		if (file.path.contains('bin')) {
			file.exclude()
		} else if (file.path.contains('lib') &&
				// Check if the current file is a submodule
				file.getFile() in list
				|| file.name =~ /Rawky-\d\.\d\.\d\.jar/) {
			file.exclude()
		}
	}
}

javapackager {
	mainClass = "com.deflatedpickle.rawky.launcher.MainKt"
	description = "A pixel art & tile map editor"
	version = project.properties["pre"] ?: version

	bundleJre = true
	customizedJre = false
	generateInstaller = true
	administratorRequired = false
	copyDependencies = true

	createTarball = true
	createZipball = true
}


task packageLinux(type: PackageTask, dependsOn: build) {
	platform = "linux"
}

task packageMac(type: PackageTask, dependsOn: build) {
	platform = "mac"
}

task packageWindows(type: PackageTask, dependsOn: build) {
	platform = "windows"
}

task packageAll(dependsOn: [
	'packageLinux',
	'packageMac',
	'packageWindows'
])

configurations {
	runtimeClasspath {
		attributes { attribute(Attribute.of("javaModule", Boolean), false) }
	}
}

run {
	args = ['indev']

	doFirst {
		file('run').mkdirs()

		copy {
			from 'data'
			into 'run/data'
		}
	}

	workingDir 'run'

	dependencies {
		runtimeOnly project(':launcher')
		runtimeOnly project(":launcher.layout.sprite")
		runtimeOnly project(":launcher.layout.animation")
		runtimeOnly project(":launcher.layout.tilemap")
		runtimeOnly project(":launcher.layout.server")
		runtimeOnly project(":launcher.layout.ascii")

		runtimeOnly project(":pixelgrid")

		runtimeOnly project(":pixelgrid.mode.mouse")
		runtimeOnly project(":pixelgrid.mode.keyboard")
		runtimeOnly project(":pixelgrid.mode.gamepad")

		runtimeOnly project(":pixelgrid.impex.imageio")
		runtimeOnly project(":pixelgrid.impex.ascii")
		runtimeOnly project(":pixelgrid.impex.rawr")

		runtimeOnly project(":pixelgrid.impex.ascii.block")

		runtimeOnly project(":pixelgrid.grid.pixel")
		runtimeOnly project(":pixelgrid.grid.tile")
		runtimeOnly project(":pixelgrid.grid.ascii")

		runtimeOnly project(":pixelgrid.layer.background")
		runtimeOnly project(":pixelgrid.layer.gridfill")
		runtimeOnly project(":pixelgrid.layer.gridlines")
		runtimeOnly project(":pixelgrid.layer.reference")
		runtimeOnly project(":pixelgrid.layer.guides")
		runtimeOnly project(":pixelgrid.layer.onionskin")
		runtimeOnly project(":pixelgrid.layer.toolpaint")
		runtimeOnly project(":pixelgrid.layer.cursor")
		runtimeOnly project(":pixelgrid.layer.debug")

		runtimeOnly project(":pixelgrid.resample.twelvemonkeys")

		runtimeOnly project(":pixelgrid.filter.jhlabs")

		runtimeOnly project(":colourwheel")
		runtimeOnly project(":colourpalette")
		runtimeOnly project(":colourhistory")
		runtimeOnly project(":colourshades")

		runtimeOnly project(":colourpalette.parser.json")
		runtimeOnly project(":colourpalette.parser.png")
		runtimeOnly project(":colourpalette.parser.gpl")
		runtimeOnly project(":colourpalette.parser.hex")
		runtimeOnly project(":colourpalette.parser.pal")
		runtimeOnly project(":colourpalette.parser.txt")

		runtimeOnly project(":tilepalette")
		runtimeOnly project(":tilepalette.parser.png")
		// runtimeOnly project(":tilepalette.parser.tmx")
		// runtimeOnly project(":tilepalette.parser.ogmo")
		// runtimeOnly project(":tilepalette.parser.ldtk")

		runtimeOnly project(":asciipalette")
		runtimeOnly project(":asciipalette.parser.ttf")

		runtimeOnly project(":autosave")
		runtimeOnly project(":autoload")

		runtimeOnly project(":timeline")
		runtimeOnly project(":layerlist")
		runtimeOnly project(":animationpreview")
		runtimeOnly project(":tiledview")

		runtimeOnly project(":server")
		runtimeOnly project(":server.userlist")
		runtimeOnly project(":server.chat")
		runtimeOnly project(":server.leaderboard")

		// Encodings
		runtimeOnly project(":server.encoding.ascii85")
		runtimeOnly project(":server.encoding.base58")
		runtimeOnly project(":server.encoding.base62")
		runtimeOnly project(":server.encoding.base64")
		runtimeOnly project(":server.encoding.base91")

		runtimeOnly project(":toolbox")

		runtimeOnly project(":toolbox.pencil")
		runtimeOnly project(":toolbox.brush")
		runtimeOnly project(":toolbox.eraser")
		runtimeOnly project(":toolbox.dropper")
		runtimeOnly project(":toolbox.line")
		runtimeOnly project(":toolbox.bucket")
		runtimeOnly project(":toolbox.shape")

		runtimeOnly project(":toolbox.shape.rectangle")
		runtimeOnly project(":toolbox.shape.circle")

		runtimeOnly project(":toolbox.bucket.fill.solid")
		runtimeOnly project(":toolbox.bucket.fill.stipple")

		runtimeOnly project(":external.discordipc")

		runtimeOnly project(':sniffle.pluginmanager')
		runtimeOnly project(':sniffle.settingsgui')
		runtimeOnly project(':sniffle.tipoftheday')
		runtimeOnly project(':sniffle.swingsettings')
	}

	application {
		mainClassName = 'com.deflatedpickle.rawky.launcher.MainKt'
	}
}
