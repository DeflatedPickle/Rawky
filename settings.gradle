pluginManagement {
	plugins {
		id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
		id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlinVersion"

		id 'com.diffplug.spotless' version "$spotlessVersion"
		id 'de.undercouch.download' version "$downloadVersion"
		id "net.kyori.blossom" version "$blossomVersion"
	}
}

rootProject.name = 'Rawky'

include 'master'

include 'core'
include 'launcher'
[
	'sprite',
	"animation",
	"tilemap",
	"server"
].each {
	include "launcher.layout.$it"
	project(":launcher.layout.$it").projectDir = new File(settingsDir, "launcher/layout/$it")
}

include 'server'
[
	'userlist',
	'chat',
	'leaderboard',
].each {
	include "server.$it"
	project(":server.$it").projectDir = new File(settingsDir, "server/$it")
}
[
	'ascii85',
	'base58',
	'base62',
	'base64',
	'base91',
].each {
	include "server.encoding.$it"
	project(":server.encoding.$it").projectDir = new File(settingsDir, "server/encoding/$it")
}

include 'pixelgrid'
['mouse', 'keyboard', 'gamepad'].each {
	include "pixelgrid.mode.$it"
	project(":pixelgrid.mode.$it").projectDir = new File(settingsDir, "pixelgrid/mode/$it")
}
[
	'imageio',
	'ascii',
	'rawr',
].each {
	include "pixelgrid.impex.$it"
	project(":pixelgrid.impex.$it").projectDir = new File(settingsDir, "pixelgrid/impex/$it")
}
['block',].each {
	include "pixelgrid.impex.ascii.$it"
	project(":pixelgrid.impex.ascii.$it").projectDir = new File(settingsDir, "pixelgrid/impex/ascii/$it")
}
['pixel', 'tile',].each {
	include "pixelgrid.grid.$it"
	project(":pixelgrid.grid.$it").projectDir = new File(settingsDir, "pixelgrid/grid/$it")
}
[
	'background',
	'gridfill',
	'gridlines',
	"guides",
	"onionskin",
	"toolpaint",
	"cursor",
	"debug"
].each {
	include "pixelgrid.layer.$it"
	project(":pixelgrid.layer.$it").projectDir = new File(settingsDir, "pixelgrid/layer/$it")
}

include 'toolbox'
[
	'pencil',
	'brush',
	'eraser',
	'dropper',
	'line',
	'bucket',
	'shape',
].each {
	include "toolbox.$it"
	project(":toolbox.$it").projectDir = new File(settingsDir, "toolbox/$it")
}
['solid', 'stipple',].each {
	include "toolbox.bucket.fill.$it"
	project(":toolbox.bucket.fill.$it").projectDir = new File(settingsDir, "toolbox/bucket/fill/$it")
}
['rectangle', 'circle',].each {
	include "toolbox.shape.$it"
	project(":toolbox.shape.$it").projectDir = new File(settingsDir, "toolbox/shape/$it")
}

include 'colourwheel'
include 'colourpalette'
[
	'json',
	'png',
	"gpl",
	"pal",
	"txt",
	"hex"
].each {
	include "colourpalette.parser.$it"
	project(":colourpalette.parser.$it").projectDir = new File(settingsDir, "colourpalette/parser/$it")
}
include 'colourhistory'
include 'colourshades'

include 'tilepalette'
['png'].each {
	include "tilepalette.parser.$it"
	project(":tilepalette.parser.$it").projectDir = new File(settingsDir, "tilepalette/parser/$it")
}

include 'timeline'
include 'layerlist'
include 'animationpreview'
include 'tiledview'

include 'autosave'
include 'autoload'

[
	'discordrpc',
	'pluginmanager',
	'settingsgui',
	'tipoftheday',
	'swingsettings'
].each {
	include "sniffle.$it"
	project(":sniffle.$it").projectDir = new File(settingsDir, "libs/sniffle/$it")
}

includeBuild 'libs/haruhi'
includeBuild 'libs/marvin'
includeBuild 'libs/monocons'
includeBuild 'libs/tosuto'
includeBuild 'libs/undulation'
includeBuild 'libs/eyellect'
includeBuild 'libs/icupnp'
// includeBuild 'libs/ogmowo'
// includeBuild 'libs/ldtkudos'
includeBuild 'libs/FlatOpenDyslexicFont'
includeBuild 'libs/FlatCatppuccinIJTheme'
includeBuild 'libs/ModernDocking/docking'
includeBuild 'libs/ModernDocking/docking-ui'
includeBuild 'libs/colorpicker'
includeBuild 'libs/owlgotrhythm'
